//  ФУНКЦИЯ 1

const checkLengthString = (string, maxSymbol) => string.length <= maxSymbol;

checkLengthString('hello', 3);


//  ФУНКЦИЯ 2

//  ПЕРВЫЙ ВАРИАНТ
const isPalidrom = (string) => {
  const newString = string.replace(/ /g,'').toLowerCase();

  let reverse = '';
  for (let i = newString.length - 1; i >= 0; i--) {
    reverse += newString[i];
  }

  return newString === reverse;
};

isPalidrom('Лёша на полке клопа нашёл ');


//  ВТОРОЙ ВАРИАНТ

// const isPalidromTwo = (string) => {
//   const newString = string.replace(/ /g,'').toLowerCase();
//   const reverse = newString.split().reverse().join();

//   return newString === reverse;
// };

// isPalidromTwo('Лёша на полке клопа нашёл ');


//  ФУНКЦИЯ 3

// Функция, которая принимает строку, извлекает содержащиеся в ней цифры от 0 до 9 и возвращает их в виде целого положительного числа. Если в строке нет ни одной цифры, функция должна вернуть NaN:

// имяФункции('а я томат');           // NaN - не могу придумать как получить NaN

// имяФункции(1.5);  // 15 - не могу придумать как убрать точку

const getNumber = (text) => typeof text === 'number' ? Math.abs(text) : Math.abs(text.match(/[0-9]/gi).join(''));


// РАСПИСАНЫЙ ПО-ЭТАПНЫЙ ВАРИАНТ

// const getNumber = (text) => {
//   if (typeof text === 'number') {
//     return Math.abs(text);
//   }
//   const newText = text.match(/[0-9]/gi).join('');
//   return Math.abs(newText);
// };

getNumber(-215);


// ФУНКЦИЯ 4

// Функция, которая принимает три параметра: исходную строку, минимальную длину и строку с добавочными символами — и возвращает исходную строку, дополненную указанными символами до заданной длины. Символы добавляются в начало строки. Если исходная строка превышает заданную длину, она не должна обрезаться. Если «добивка» слишком длинная, она обрезается с конца.

// Эта функция нам пригодится для формирования адресов файлов. Примеры её использования:

// Добавочный символ использован один раз
// имяФункции('1', 2, '0');      // '01'

// Добавочный символ использован три раза
// имяФункции('1', 4, '0');      // '0001'

// Добавочные символы обрезаны с конца
// имяФункции('q', 4, 'werty');  // 'werq'

// Добавочные символы использованы полтора раза
// имяФункции('q', 4, 'we');     // 'wweq'

// Добавочные символы не использованы, исходная строка не изменена
// имяФункции('qwerty', 4, '0'); // 'qwerty'

// Попробуйте не использовать при этом функцию padStart() =)
